{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(ggplot2)\ncountydata <- read.csv(\"~/Documents/shiny1/countydata.csv\")\ncount_data_types = names(countydata[c(13:length(names(countydata)))])\ncountydata$region = as.character(countydata$region)\nui = navbarPage( \n  # Application title\n  title = (\"County Data\"),\n  \n  tabPanel(\"Map\",\n   # sidebarPanel(\n      selectInput(\"data_type\",\n                  \"Data Type:\", \n                  count_data_types, selected = \"below_poverty_line\"),\n      \n    \n    selectInput(\"transformation\",\n                \"Data transformation:\", \n                c(\"standard\", \"difference from average\", \"logged val\"), selected = \"standard\")\n    \n  ,\n  selectInput(\"state\",\n              \"State:\", \n              c(\"nation\", unique(countydata$region)), selected = \"nation\"),\n  submitButton(),\n  \n # ),\n    # Show a plot of the generated distribution\n   # mainPanel(\n     \n        \n      plotOutput(\"distPlot\") \n    #  plotOutput(\"distPlot\")\n      \n    ),\n tabPanel(\"Regression\",\n          # sidebarPanel(\n          selectInput(\"var1\",\n                      \"X- Axis:\", \n                      count_data_types, selected = \"below_poverty_line\"),\n          selectInput(\"var2\",\n                      \"Y- Axis:\", \n                      count_data_types, selected = \"below_poverty_line\"),\n          \n          selectInput(\"var3\",\n                      \"Color:\", \n                      c(\"none\", count_data_types), selected = \"none\"),\n          \n          \n          selectInput(\"model\",\n                      \"Model:\", \n                      c(\"linear\", \"difference from average\", \"logged val\"), selected = \"standard\"),\n          submitButton(\"Apply Changes\"),\n          plotOutput(\"regPlot\"), \n          #  plotOutput(\"distPlot\")\n          textOutput(\"regRes\" ) #,container = if (inline) span else div, inline = FALSE) )\n )\n  )\n#) \n\nserver = function(input, output){\n  \n  output$regRes <- renderPrint({\n    var1 = which(names(countydata) == input$var1)\n    var2 = which(names(countydata) == input$var2)\n    var1 = countydata[,var1]\n    var2 = countydata[,var2]\n    model = input$model\n    print(summary(lm(var1~var2)))\n    #return(unlist(summary(lm(var1~var2))))\n  })\n  \n  output$regPlot <- renderPlot({ \n    var1 = which(names(countydata) == input$var1)\n    var2 = which(names(countydata) == input$var2)\n    var3 = which(names(countydata) == input$var3)\n    var1 = countydata[,var1]\n    var2 = countydata[,var2]\n    var3 = countydata[,var3]\n    model = input$model \n    col = input$var3\n    if(col == \"none\"){\n      var3 = \"black\"\n    #ggplot(countydata, aes(var1, var2)) + geom_point() + xlab(input$var1) + ylab(input$var2)\n    } else {\n    }\n      ggplot(countydata, aes(var1, var2, color = var3)) + geom_point() + xlab(input$var1) + ylab(input$var2)\n\n  }) \n  \n  output$distPlot <- renderPlot({\n    inpval = which(names(countydata) == input$data_type)\n    inptype = input$transformation\n    region = input$state\n    dex = which(!is.na(countydata))\n    mapend = coord_map(\"bonne\", parameters=45)\n    mapfill = scale_fill_distiller(palette = \"Reds\", direction = 1) \n    mapguide = guides(fill=guide_legend(title=input$data_type))\n  #  ggplot(countydata) + geom_polygon(aes(long, lat, group = group, fill = countydata[,inpval]),color = \"grey\", size = 0.1) + coord_map(\"bonne\", parameters=45)+ scale_fill_distiller(palette = \"Reds\", direction = 1) + guides(fill=guide_legend(title=input$Year))\n    if(region != \"nation\"){\n      dex = which(countydata$region == region)\n      mapbase = ggplot(countydata[dex,])\n      print(\"howdy\")\n    } else {\n      dex = c(1:nrow(countydata))\n      mapbase = ggplot(countydata)\n    }\n    mapbase = ggplot(countydata[dex,])\n    meanv = mean(na.omit(countydata[dex,inpval]))\n    #mapbase + mapmid + mapend + mapfill + mapguide\n    if(inptype == \"standard\"){\n    mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,inpval]),color = \"grey\", size = 0.1) \n    \n    } \n    if(inptype == \"difference from average\"){\n      #print(countydata[dex,inpval] - mean(countydata[dex,inpval]))\n      print(meanv)\n      val = (countydata[dex,inpval] - meanv)\n      print(head(val))\n      print(length(dex))\n      #mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[,inpval] - meanv),color = \"grey\", size = 0.1) \n      #mapmid = geom_polygon(aes(long, lat, group = group, fill = val),color = \"grey\", size = 0.1) \n      mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,inpval]-meanv),color = \"grey\", size = 0.1) \n    }\n    \n    if(inptype == \"logged val\"){\n      mapmid = geom_polygon(aes(long, lat, group = group, fill = log(countydata[dex,inpval])),color = \"grey\", size = 0.1) \n    }\n    mapbase + mapmid + mapend + mapfill + mapguide\n})\n \n}\n\n\nshinyApp(ui = ui, server = server)",
    "created" : 1508869103039.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3044202288",
    "id" : "2D163198",
    "lastKnownWriteTime" : 1508953071,
    "last_content_update" : 1508953071,
    "path" : "~/Documents/shiny1/shiny_proj32.R",
    "project_path" : "shiny_proj32.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}