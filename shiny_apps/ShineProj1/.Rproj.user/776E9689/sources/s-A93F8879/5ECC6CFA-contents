library(dplyr)
library(ggplot2)
## from https://github.com/tonmcg/County_Level_Election_Results_12-16/blob/master/US_County_Level_Presidential_Results_08-16.csv
##

gcounty <- read.csv("~/Documents/shiny1/countydata.csv")
CountPresRes <- read.csv("~/Documents/shiny1/CountPresRes08-16.csv")
CountPresRes$total_2008[which(CountPresRes$fips_code == 29105)] = CountPresRes$dem_2008[which(CountPresRes$fips_code == 29105)] + CountPresRes$gop_2008[which(CountPresRes$fips_code == 29105)] + CountPresRes$oth_2008[which(CountPresRes$fips_code == 29105)]

CountPresRes08.16 <- CountPresRes
CountPresRes08.16$dem_2008_pct = CountPresRes08.16$dem_2008/CountPresRes08.16$total_2008
CountPresRes08.16$dem_2012_pct = CountPresRes08.16$dem_2012/CountPresRes08.16$total_2012
CountPresRes08.16$dem_2016_pct = CountPresRes08.16$dem_2016/CountPresRes08.16$total_2016

CountPresRes08.16$gop_2008_pct = CountPresRes08.16$gop_2008/CountPresRes08.16$total_2008
CountPresRes08.16$gop_2012_pct = CountPresRes08.16$gop_2012/CountPresRes08.16$total_2012
CountPresRes08.16$gop_2016_pct = CountPresRes08.16$gop_2016/CountPresRes08.16$total_2016

CountPresRes08.16$dem_gop_2008_spread_pct = CountPresRes08.16$dem_2008_pct - CountPresRes08.16$gop_2008_pct
CountPresRes08.16$dem_gop_2012_spread_pct = CountPresRes08.16$dem_2012_pct - CountPresRes08.16$gop_2012_pct
CountPresRes08.16$dem_gop_2016_spread_pct = CountPresRes08.16$dem_2016_pct - CountPresRes08.16$gop_2016_pct

CountPresRes08.16$dem_gop_spread_2008_2012_change = CountPresRes08.16$dem_gop_2012_spread_pct - CountPresRes08.16$dem_gop_2008_spread_pct
CountPresRes08.16$dem_gop_spread_2012_2016_change = CountPresRes08.16$dem_gop_2016_spread_pct - CountPresRes08.16$dem_gop_2012_spread_pct
CountPresRes08.16$dem_gop_spread_2008_2016_change = CountPresRes08.16$dem_gop_2016_spread_pct - CountPresRes08.16$dem_gop_2008_spread_pct

mydta = read.csv( "prez_elec_history_data.csv")
newdt = read.csv( "prez_elec_history_data.csv")
newdt = left_join(mydta, CountPresRes08.16, by = c("fips" = "fips_code"))
full_county_data = read.csv( "full_county_data.csv")
fillana = function(){
  anadt = newdt[,-c(62, 63, 1:5)]
  #anadt = anadt[c(1:10),c(1:10)]
  anadt = na.omit(anadt)
  ana = matrix(nrow = ncol(anadt), ncol = ncol(anadt))
  for(x in 1:ncol(anadt)){
    for(y in x:ncol(anadt)){
      ana[x,y] = summary(lm(anadt[,x] ~ anadt[,y]))$r.squared
      #print(summary(lm(newdt[,x] ~ newdt[,y]))$r.squared)
    }
    print(x/ncol(anadt))
  }
  rownames(ana) = colnames(anadt)
  colnames(ana) = colnames(anadt)
  return(ana)
}


findrsq = function(){
  vec = c()
  vec2 = c()
  for(x in c(20:100)){
    newdt$dummy = 0
    newdt$dummy[which(newdt$white_alone > x)] = 1
    #summary(lm(newdt$dem_gop_spread_2012_2016_change ~ newdt$white_alone + newdt$dummy + newdt$dummy * newdt$white_alone))
    vec = c(vec, x)
    vec2 = c(vec2, summary(lm(newdt$dem_gop_spread_2012_2016_change ~ newdt$white_alone + newdt$dummy + newdt$dummy * newdt$white_alone))$r.squared)
  }
  return(cbind(vec, vec2))
}


mung <- merge(gcounty, newdt, all.x = TRUE)
mung <- arrange(mung, order)
mung <- left_join(gcounty, newdt)

#ggplot(mung) + geom_polygon(aes(long, lat, group = group, fill = dem_gop_spread_2012_2016_change)) + scale_fill_distiller(palette = "RdBu", direction = 1) +coord_map("bonne", parameters=45)
#ggplot(newdt, aes(white_alone, dem_gop_spread_2012_2016_change * -1, size = pop_2014, col = dem_gop_2016_spread_pct))+ geom_point() + scale_color_gradient2(low = "red", high = "blue", mid = "white") + geom_smooth() + facet_wrap(~dem_gop_2016_spread_pct > .5)

library(dplyr)
library(readr)
library(stringr)
library(tidyr)
library(readxl)
library(classInt)
library(RColorBrewer)
library(maptools)
library(readr)
library(plotly)
library(shiny)
library(ggplot2)
library(gridExtra)
full_county_data$cl_pct = full_county_data$Clinton/(full_county_data$Clinton + full_county_data$Trump)
full_county_data$cl_spread = (full_county_data$Clinton - full_county_data$Trump)

#countydata <- full_county_data
countydata = mung
countydata[,12] = countydata$white_alone
countydata = countydata[,-which(names(countydata) == "white_alone")]
names(countydata)[12] = "white_alone"

count_data_types = names(countydata[c(12:length(names(countydata)))])
#count_data_types = names(countydata)
countydata$region = as.character(countydata$region)
ui = navbarPage( 
  # Application title
  title = ("County Data"),
  
  tabPanel("Map",
           # sidebarPanel(
           selectInput("data_type",
                       "Data Type:", 
                       count_data_types, selected = "below_poverty_line"),
           
           
           selectInput("transformation",
                       "Data transformation:", 
                       c("standard", "difference from average", "logged val"), selected = "standard")
           
           ,
           selectInput("state",
                       "State:", 
                       c("nation", unique(countydata$region)), selected = "nation"),
           submitButton(),
           
           # ),
           # Show a plot of the generated distribution
           # mainPanel(
           
           #splitLayout(
           plotOutput("distPlot"), 
           plotOutput("elecPlot"),
           plotOutput("residPlot") 
           #)
           
           #  plotOutput("distPlot")
           
  ),
  tabPanel("Regression",
           # sidebarPanel(
           selectInput("var1",
                       "X- Axis:", 
                       count_data_types, selected = "below_poverty_line"),
           selectInput("var2",
                       "Y- Axis:", 
                       count_data_types, selected = "below_poverty_line"),
           
           selectInput("var3",
                       "Color:", 
                       c("none", count_data_types), selected = "none"),
           
           
           selectInput("model",
                       "Model:", 
                       c("linear", "difference from average", "logged val"), selected = "standard"),
           submitButton("Apply Changes"),
           plotOutput("regPlot"), 
           #  plotOutput("distPlot")
           textOutput("regRes" ) #,container = if (inline) span else div, inline = FALSE) )
  )
)
#) 

server = function(input, output){
  
  output$regRes <- renderPrint({
    var1 = which(names(countydata) == input$var1)
    var2 = which(names(countydata) == input$var2)
    var1 = countydata[,var1]
    var2 = countydata[,var2]
    model = input$model
    print(summary(lm(var1~var2)))
    #return(unlist(summary(lm(var1~var2))))
  })
  
  output$regPlot <- renderPlot({ 
    var1 = which(names(countydata) == input$var1)
    var2 = which(names(countydata) == input$var2)
    var3 = which(names(countydata) == input$var3)
    var1 = countydata[,var1]
    var2 = countydata[,var2]
    var3 = countydata[,var3]
    model = input$model 
    col = input$var3
    if(col == "none"){
      var3 = "black"
      #ggplot(countydata, aes(var1, var2)) + geom_point() + xlab(input$var1) + ylab(input$var2)
    } else {
    }
    ggplot(countydata, aes(var1, var2, color = var3)) + geom_point() + xlab(input$var1) + ylab(input$var2)
    
  }) 
  
  output$distPlot <- renderPlot({
    inp = input$data_type
    inpval = which(names(countydata) == inp)
    inptype = input$transformation
    region = input$state
    dex = which(!is.na(countydata))
    mapend = coord_map("bonne", parameters=45)
    mapfill = scale_fill_distiller(palette = "RdBu", direction = 1) 
    mapguide = guides(fill=guide_legend(title=input$data_type))
    #  ggplot(countydata) + geom_polygon(aes(long, lat, group = group, fill = countydata[,inpval]),color = "grey", size = 0.1) + coord_map("bonne", parameters=45)+ scale_fill_distiller(palette = "Reds", direction = 1) + guides(fill=guide_legend(title=input$Year))
    if(region != "nation"){
      dex = which(countydata$region == region)
      mapbase = ggplot(countydata[dex,])
      print("howdy")
    } else {
      dex = c(1:nrow(countydata))
      mapbase = ggplot(countydata)
    }
    mapbase = ggplot(countydata[dex,])
    meanv = mean(na.omit(countydata[dex,inpval]))
    #mapbase + mapmid + mapend + mapfill + mapguide
    if(inptype == "standard"){
      mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,inpval]),color = "grey", size = 0.1) 
      
    } 
    if(inptype == "difference from average"){
      #print(countydata[dex,inpval] - mean(countydata[dex,inpval]))
      print(meanv)
      val = (countydata[dex,inpval] - meanv)
      print(head(val))
      print(length(dex))
      #mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[,inpval] - meanv),color = "grey", size = 0.1) 
      #mapmid = geom_polygon(aes(long, lat, group = group, fill = val),color = "grey", size = 0.1) 
      mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,inpval]-meanv),color = "grey", size = 0.1) 
    }
    
    if(inptype == "logged val"){
      mapmid = geom_polygon(aes(long, lat, group = group, fill = log(countydata[dex,inpval])),color = "grey", size = 0.1) 
    }
    mapbase + mapmid + mapend + mapfill + mapguide + ggtitle(inp)
  })
  
  output$elecPlot <- renderPlot({
    inpval = which(names(countydata) == "dem_gop_2016_spread_pct")
    View(countydata)
    View(mung)
    inptype = input$transformation
    region = input$state
    dex = which(!is.na(countydata))
    mapend = coord_map("bonne", parameters=45)
    mapfill = scale_fill_distiller(palette = "RdBu", direction = 1) 
    #mapguide = guides(fill=guide_legend(title=input$data_type))
    #  ggplot(countydata) + geom_polygon(aes(long, lat, group = group, fill = countydata[,inpval]),color = "grey", size = 0.1) + coord_map("bonne", parameters=45)+ scale_fill_distiller(palette = "Reds", direction = 1) + guides(fill=guide_legend(title=input$Year))
    if(region != "nation"){
      dex = which(countydata$region == region)
      mapbase = ggplot(countydata[dex,])
      print("howdy")
    } else {
      dex = c(1:nrow(countydata))
      mapbase = ggplot(countydata)
    }
    mapbase = ggplot(countydata[dex,])
    meanv = mean(na.omit(countydata[dex,inpval]))
    #mapbase + mapmid + mapend + mapfill + mapguide
    if(inptype == "standard"){
      mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,inpval]),color = "grey", size = 0.1) 
      
    } 
    if(inptype == "difference from average"){
      #print(countydata[dex,inpval] - mean(countydata[dex,inpval]))
      print(meanv)
      val = (countydata[dex,inpval] - meanv)
      print(head(val))
      print(length(dex))
      mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,inpval]-meanv),color = "grey", size = 0.1) 
    }
    if(inptype == "logged val"){
      mapmid = geom_polygon(aes(long, lat, group = group, fill = log(countydata[dex,inpval])),color = "grey", size = 0.1) 
    }
    
    p1 = mapbase + mapmid + mapend + mapfill  + ggtitle("2016 election results by county") #+ mapguide
    #grid.arrange(p1, p1, p1, ncol = 1)
    #p1 
    #mapbase + mapmid
  })
  
  output$residPlot <- renderPlot({
    inpval = which(names(newdt) == input$data_type)
    cpd = which(names(newdt) == "dem_gop_2016_spread_pct")
    print(input$data_type)
    inptype = input$transformation
    region = input$state
    dex = which(!is.na(countydata))
    mapend = coord_map("bonne", parameters=45)
    mapfill = scale_fill_distiller(palette = "RdBu", direction = 1) 
    mapguide = guides(fill=guide_legend(title=input$data_type))
    mod = lm(newdt[,cpd] ~ newdt[,inpval])
    newdt$resid[which(rowSums( is.na(newdt[,c(cpd, inpval)])) == 0)] = mod$residuals
    cp = data.frame(newdt$fips, newdt$resid)
    names(cp) = c("fips", "resid")
    
    print(length(mod$residuals))
    print(nrow(countydata))
    print(length(dex))
    #print(names(full_county_data))
    print(which(names(full_county_data) == "fips"))
    print(which(names(cp) == "fips"))
    countydata2 <- left_join(full_county_data, cp, c("fips" = "fips"))
    # View(countydata2)
    countydata = countydata2
    inpval = which(names(countydata) == input$data_type)
    if(region != "nation"){
      dex = which(countydata$region == region)
      mapbase = ggplot(countydata[dex,])
      print("howdy")
    } else {
      dex = c(1:nrow(countydata))
      mapbase = ggplot(countydata)
    }
    mapbase = ggplot(countydata[dex,]) 
    meanv = mean(na.omit(countydata[dex,inpval])) 
    if(inptype == "standard"){
      mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,ncol(countydata)]),color = "grey", size = 0.1) 
      
    } 
    if(inptype == "difference from average"){
      print(meanv)
      val = (countydata[dex,inpval] - meanv)
      print(head(val))
      print(length(dex))
      mapmid = geom_polygon(aes(long, lat, group = group, fill = countydata[dex,inpval]-meanv),color = "grey", size = 0.1) 
    }
    
    if(inptype == "logged val"){
      mapmid = geom_polygon(aes(long, lat, group = group, fill = log(countydata[dex,inpval])),color = "grey", size = 0.1) 
    }
    mapbase + mapmid + mapend + mapfill + mapguide
  })
  
}


shinyApp(ui = ui, server = server)

